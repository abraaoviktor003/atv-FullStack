// Inicializando o array com diferentes tipos de comida representados por emojis
const comidas = ["üç≥", "üç£", "üçø", "üçü", "üçî", "üçï"];

// 1. Usando o .map() para "cozinhar" os alimentos (transformando-os)
const comidasCozinhadas = comidas.map(item => {
  if (item === "üç≥") {
    return "üçî"; // Ovo vira hamb√∫rguer
  }
  if (item === "üçø") {
    return "üçü"; // Pipoca vira batata frita
  }
  return item; // O restante dos alimentos permanece igual
});

console.log("Comidas cozinhadas:", comidasCozinhadas);
// Output: Comidas cozinhadas: [ 'üçî', 'üç£', 'üçü', 'üçü', 'üçî', 'üçï' ]

// 2. Usando o .filter() para filtrar os alimentos fritos (üçü)
const comidasFritas = comidas.filter(item => item === "üçü");

console.log("Comidas fritas:", comidasFritas);
// Output: Comidas fritas: [ 'üçü' ]

// 3. Usando o .reduce() para "comer" todas as comidas e transformar em algo final (üí©)
const resultadoFinal = comidas.reduce((acumulador, item) => {
  if (item === "üç£") {
    return acumulador + "üç£ "; // Sushi adiciona sushi no resultado
  }
  return acumulador + "üí© "; // Todos os outros alimentos resultam em coc√¥ (üí©)
}, "");

console.log("Resultado final ap√≥s comer:", resultadoFinal);
// Output: Resultado final ap√≥s comer: üí© üí© üí© üí© üí©


// Arrow function de uma √∫nica linha:
// Quando a fun√ß√£o tem apenas uma express√£o, n√£o precisa de chaves nem da palavra "return".
// O valor da express√£o √© retornado automaticamente.
let unicaLinha = (a, b) => a + b

// Chamando a fun√ß√£o e guardando o resultado
let resultado = unicaLinha(10, 20)
console.log(resultado) // 30

// Arrow function com mais de uma linha:
// Quando usamos chaves {}, precisamos escrever "return" se quisermos retornar algo.
// Dentro das chaves podemos ter v√°rias instru√ß√µes.
let maisDeUmaLinha = (a, b) => {
    console.log(a) // Mostra o primeiro par√¢metro
    console.log(b) // Mostra o segundo par√¢metro
    let resultado = a + b // Soma os dois valores
    return resultado // Retorna o resultado da soma
}

// Chamando a fun√ß√£o multi-linha
console.log(maisDeUmaLinha(10, 20)) // 30
